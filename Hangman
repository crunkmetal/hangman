// Hangman of March
// The classic game of hangman (with a March theme)

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cctype>

using namespace std;

void hangman();
void playAgain();

int main()
{
    hangman();
    return 0;
}

void hangman()
{
    //setup
    const int MAX_WRONG = 8;  //maximum number of incorrect guesses allowed

    vector<string> words;   //collection of possible words to guess
    words.push_back("SAINT_PATRICKS_DAY");
    words.push_back("LEPRECHAUN");
    words.push_back("IDES_OF_MARCH");
    words.push_back("MARCH_MADNESS");
    words.push_back("DAFFODIL");
    words.push_back("PISCES");
    words.push_back("SPRING");
    words.push_back("POT_OF_GOLD");
    words.push_back("RAINBOW");
    words.push_back("MARS");
    words.push_back("VERNAL_EQUINOX");
    words.push_back("ALEXANDER_GRAHAM_BELL");
    words.push_back("PEACE_CORPS");
 
    srand(static_cast<unsigned int>(time(0)));
    random_shuffle(words.begin(), words.end());
    //word to guess
    const string THE_WORD = words[0];
    //number of incorrect guesses
    int wrong = 0;
    //word guessed so far
    string soFar(THE_WORD.size(), '+');
    //letters already guessed
    string used = "";                    

    cout << "Welcome to the Hangman of March.\n";
    cout << "All words to be guessed have a 'month of March' theme to them.\n";
    cout << "'Spaces' are denoted by underscores '_'\n\n";
    // while the word has not been guessed yet AND you have not used up all of your guesses    
    while ((wrong < MAX_WRONG) && (soFar != THE_WORD))
    {
        cout << "\n\nYou have " << (MAX_WRONG - wrong);
        cout << " incorrect guesses left.\n";
        cout << "You've used the following letters:\t" << used << endl;
        cout << "\nSo far, the word is:\t\" " << soFar << " \"" << endl;

        char guess;
        cout << "\nEnter your guess: ";
        cin >> guess;
        //make uppercase since secret word in uppercase
        guess = toupper(guess);
    	// if user enters a previously guessed guess
        while (used.find(guess) != string::npos)
        {
            cout << "\nYou've already guessed " << guess << endl;
            cout << "Enter your guess: ";
            cin >> guess;
            guess = toupper(guess);
        }
        // add unused guess into 'used' string
        used += guess;
        // if user guess is in the word and not at the end of the word string
        if (THE_WORD.find(guess) != string::npos)
        {
            for (int i = 0; i < THE_WORD.length(); ++i)
            {
            	// if the user guess is in the word
                if (THE_WORD[i] == guess)
                {
                    // change it's status from hidden to display
                    soFar[i] = guess;
                }
            }
        }
        // if the user guess is NOT in the word
        else
        {
            cout << "\nSorry, " << guess << " isn't in the word.\n";
        	// add to the 'wrong' guess count amount
            ++wrong;
        }
    }
    // when word is completely guessed  do this...
    cout << "\n\n\n [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] \n";
    cout << "[] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] \n";
    cout << " [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] \n\n\n";
    cout << "\t\tG A M E  O V E R\n\n\n";
    cout << "\tThe word is:\t" << THE_WORD;
    cout << "\n\n\n [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] \n";
    cout << "[] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] \n";
    cout << " [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] \n\n\n";
    // invoke function to ask player to play again
    playAgain();
}

// function to ask player to play again
void playAgain()
{
    char playAgainResponse;
    cout << "\nWould you like to play again? (Y or N)\t";
    cin >> playAgainResponse;
    // if player does not wish to replay
    if (playAgainResponse == 'N' || playAgainResponse == 'n')
    {
        // exit the application entirely
        exit(0);
    }
    // if player wishes to play again
    if (playAgainResponse == 'Y' || playAgainResponse == 'y')
    {	        
        main();
    }
    // handle invalid user input
    else
    {
		cout << "\nYou have entered an invalid response.";
        playAgain();
    }
}


